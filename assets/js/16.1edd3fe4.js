(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{222:function(a,e,r){"use strict";r.r(e);var t=r(0),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"page-title"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#page-title","aria-hidden":"true"}},[a._v("#")]),a._v(" "+a._s(a.$page.title))]),a._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://docs.gradle.org/current/userguide/gradle_daemon.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("原文链接"),r("OutboundLink")],1)])]),a._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#为什么gradle-daemon对性能很重要"}},[a._v("为什么Gradle Daemon对性能很重要")])]),r("li",[r("a",{attrs:{href:"#daemon运行状态"}},[a._v("Daemon运行状态")])]),r("li",[r("a",{attrs:{href:"#禁用daemon"}},[a._v("禁用Daemon")])]),r("li",[r("a",{attrs:{href:"#停止现有的daemon"}},[a._v("停止现有的Daemon")])]),r("li",[r("a",{attrs:{href:"#faq"}},[a._v("FAQ")]),r("ul",[r("li",[r("a",{attrs:{href:"#如何禁用gradle-daemon？"}},[a._v("如何禁用Gradle Daemon？")])]),r("li",[r("a",{attrs:{href:"#为什么我的机器上有多个daemon进程？"}},[a._v("为什么我的机器上有多个Daemon进程？")])]),r("li",[r("a",{attrs:{href:"#daemon使用多少内存，可以分配更多空间吗？"}},[a._v("Daemon使用多少内存，可以分配更多空间吗？")])]),r("li",[r("a",{attrs:{href:"#如何停止daemon？"}},[a._v("如何停止Daemon？")])]),r("li",[r("a",{attrs:{href:"#daemon会有什么问题？"}},[a._v("Daemon会有什么问题？")])])])]),r("li",[r("a",{attrs:{href:"#tools-ides"}},[a._v("Tools & IDEs")])]),r("li",[r("a",{attrs:{href:"#gradle-daemon如何使构建更快？"}},[a._v("Gradle Daemon如何使构建更快？")])])])]),r("p"),a._v(" "),r("div",{staticClass:"danger custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("Wikipedia")]),a._v(" "),r("p",[a._v("守护进程是一种计算机程序，它作为后台进程运行，而不是受交互式用户的直接控制。")])]),a._v(" "),r("p",[a._v("Gradle在Java虚拟机（JVM）上运行，并使用几个支持库，它们需要很短的初始化时间。结果，有时启动似乎有些慢。这个问题的解决方案是 "),r("strong",[a._v("Gradle Daemon")]),a._v("：一个长期存在的后台进程，比起其他情况，它可以更快地执行构建。通过避免昂贵的引导过程以及利用缓存（将有关项目的数据保留在内存中），我们可以实现这一目标。使用Daemon运行Gradle构建与没有运行没有什么不同。只需配置您是否要使用它-其他所有事情都由Gradle透明地处理。")]),a._v(" "),r("h2",{attrs:{id:"为什么gradle-daemon对性能很重要"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么gradle-daemon对性能很重要","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么Gradle Daemon对性能很重要")]),a._v(" "),r("p",[a._v("Daemon是一个长期存在的进程，因此我们不仅可以避免每次构建都需要启动JVM的成本，而且还可以在内存中缓存有关项目结构，文件，任务等信息。")]),a._v(" "),r("p",[a._v("推理很简单：通过重用以前构建的计算来提高构建速度。但是，这样做的好处是巨大的：我们通常会在以后的构建中将构建时间减少15-75％。我们建议您使用"),r("code",[a._v("--profile")]),a._v("对构建进行概要分析，以了解 "),r("strong",[a._v("Gradle Daemon")]),a._v(" 对您的影响。")]),a._v(" "),r("p",[r("strong",[a._v("Gradle Daemon")]),a._v(" 从Gradle 3.0开始默认启用，因此您无需做任何事情即可从中受益。")]),a._v(" "),r("p",[a._v("如果您在不重用任何进程的临时环境(例如容器)中运行CI构建，那么使用守护进程将会轻微地降低性能(由于缓存了额外的信息)，而且没有任何好处，并且可能会被禁用。")]),a._v(" "),r("h2",{attrs:{id:"daemon运行状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#daemon运行状态","aria-hidden":"true"}},[a._v("#")]),a._v(" Daemon运行状态")]),a._v(" "),r("p",[a._v("要获取正在运行的Gradle守护程序及其状态的列表，请使用--status命令。")]),a._v(" "),r("p",[a._v("输出样本：")]),a._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[a._v("PID VERSION                 STATUS\n "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("28411")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.0")]),a._v("                     IDLE\n "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("34247")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.0")]),a._v("                     BUSY\n")])])]),r("p",[a._v("当前，给定的Gradle版本只能连接到相同版本的Daemon。这意味着状态输出将仅显示正在调用的Gradle版本的Daemon，而不显示任何其他版本的Daemon。 Gradle的未来版本将解除此约束，并将显示所有Gradle版本的正在运行的Daemon。")]),a._v(" "),r("h2",{attrs:{id:"禁用daemon"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#禁用daemon","aria-hidden":"true"}},[a._v("#")]),a._v(" 禁用Daemon")]),a._v(" "),r("p",[r("strong",[a._v("Gradle Daemon")]),a._v(" 默认情况下处于启用状态，我们建议始终启用它。有几种方法可以禁用守护程序，但是最常见的一种方法是添加该行")]),a._v(" "),r("div",{staticClass:"language-properties extra-class"},[r("pre",{pre:!0,attrs:{class:"language-properties"}},[r("code",[r("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("org.gradle.daemon")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),r("span",{pre:!0,attrs:{class:"token attr-value"}},[a._v("false")]),a._v("\n")])])]),r("p",[a._v("到文件"),r("code",[a._v("«USER_HOME»/.gradle/gradle.properties")]),a._v("，其中"),r("code",[a._v("«USER_HOME»")]),a._v("是您的主目录。通常是以下之一，具体取决于您的平台：")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("C:\\Users\\<username>")]),a._v(" (Windows Vista & 7+)")]),a._v(" "),r("li",[r("code",[a._v("/Users/<username>")]),a._v(" (macOS)")]),a._v(" "),r("li",[r("code",[a._v("/home/<username>")]),a._v(" (Linux)")])]),a._v(" "),r("p",[a._v("如果该文件不存在，只需使用文本编辑器创建它即可。您可以在下面的“"),r("a",{attrs:{href:"#faq"}},[a._v("Daemon FAQ")]),a._v("”中找到其他禁用（启用）Daemon的方法的详细信息。该部分还包含有关Daemon如何工作的更多详细信息。")]),a._v(" "),r("p",[a._v("请注意，启用了Daemon后，无论特定构建使用的Gradle版本如何，所有构建都将利用速度提升。")]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("Continuous integration(持续集成, CI)")]),a._v(" "),r("p",[a._v("从Gradle 3.0开始，我们默认启用Daemon并建议将其用于开发人员的计算机和Continuous Integration服务器。但是，如果您怀疑Daemon使CI构建不稳定，则可以将其禁用以对每个构建使用全新的运行时，因为运行时与任何先前的构建完全隔离。")])]),a._v(" "),r("h2",{attrs:{id:"停止现有的daemon"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#停止现有的daemon","aria-hidden":"true"}},[a._v("#")]),a._v(" 停止现有的Daemon")]),a._v(" "),r("p",[a._v("如前所述，Daemon是一个后台进程。不过，您不必担心计算机上会建立Gradle进程。与可用的系统内存总量相比，每个Daemon都会监视其内存使用情况，如果可用系统内存不足，则每个空闲进程都会在空闲时停止运行。如果您出于任何原因要明确停止运行Daemon进程，只需使用命令"),r("code",[a._v("gradle --stop")]),a._v("。")]),a._v(" "),r("p",[a._v("这将终止所有与用于执行命令的相同Gradle版本一起启动的Daemon进程。如果安装了 Java Development Kit (JDK)，则可以通过运行"),r("code",[a._v("jps")]),a._v("命令轻松地验证守护程序是否已停止。您会看到所有名为"),r("code",[a._v("GradleDaemon")]),a._v("的正在运行的Daemon。")]),a._v(" "),r("h2",{attrs:{id:"faq"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#faq","aria-hidden":"true"}},[a._v("#")]),a._v(" FAQ")]),a._v(" "),r("h3",{attrs:{id:"如何禁用gradle-daemon？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何禁用gradle-daemon？","aria-hidden":"true"}},[a._v("#")]),a._v(" 如何禁用Gradle Daemon？")]),a._v(" "),r("p",[a._v("有两种建议的方法可以永久禁用Daemon：")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("通过环境变量：将"),r("code",[a._v("-Dorg.gradle.daemon=false")]),a._v("添加到"),r("code",[a._v("GRADLE_OPTS")]),a._v("环境变量")])]),a._v(" "),r("li",[r("p",[a._v("通过属性文件：将"),r("code",[a._v("org.gradle.daemon=false")]),a._v("添加到"),r("code",[a._v("«GRADLE_USER_HOME»/gradle.properties")]),a._v("文件中")])])]),a._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[a._v("注意，"),r("code",[a._v("«GRADLE_USER_HOME»")]),a._v("默认为"),r("code",[a._v("«USER_HOME»/.gradle")]),a._v("，其中"),r("code",[a._v("«USER_HOME»")]),a._v("是当前用户的主目录。可以通过"),r("code",[a._v("-g")]),a._v("和"),r("code",[a._v("--gradle-user-home")]),a._v("命令行开关以及"),r("code",[a._v("GRADLE_USER_HOME")]),a._v("环境变量和"),r("code",[a._v("org.gradle.user.home")]),a._v("JVM系统属性来配置此位置。")])]),a._v(" "),r("p",[a._v("两种方法具有相同的效果。使用哪一个取决于个人喜好。大多数Gradle用户选择第二个选项，并将条目添加到用户"),r("code",[a._v("gradle.properties")]),a._v("文件中。")]),a._v(" "),r("p",[a._v("在Windows上，此命令将为当前用户禁用Daemon：")]),a._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("if not exist "),r("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%USERPROFILE%/.gradle"')]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%USERPROFILE%/.gradle"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("echo. "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%USERPROFILE%/.gradle/gradle.properties"')]),a._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" org.gradle.daemon"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("false "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%USERPROFILE%/.gradle/gradle.properties"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),r("p",[a._v("在类似UNIX的操作系统上，以下Bash shell命令将为当前用户禁用Daemon：")]),a._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p ~/.gradle "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[a._v('"org.gradle.daemon=false"')]),a._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" ~/.gradle/gradle.properties\n")])])]),r("p",[a._v("一旦以这种方式为构建环境禁用了守护程序，除非使用"),r("code",[a._v("--daemon")]),a._v("选项明确请求，否则不会启动Gradle守护程序。")]),a._v(" "),r("p",[a._v("使用Gradle命令行界面时，"),r("code",[a._v("--daemon")]),a._v("和"),r("code",[a._v("--no-daemon")]),a._v("命令行选项启用和禁用对单个构建调用的守护程序使用。在考虑构建环境时，这些命令行选项具有最高优先级。通常，为环境（例如用户帐户）启用Daemon更为方便，以便所有构建都使用Daemon，而无需记住提供"),r("code",[a._v("--daemon")]),a._v("选项。")]),a._v(" "),r("h3",{attrs:{id:"为什么我的机器上有多个daemon进程？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么我的机器上有多个daemon进程？","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么我的机器上有多个Daemon进程？")]),a._v(" "),r("p",[a._v("Gradle为什么要创建一个新的Daemon，而不是使用已经运行的Daemon，有几个原因。基本规则是，如果没有可用的空闲或兼容Daemon，则Gradle将启动新的Daemon。 Gradle将杀死任何闲置3个小时或更长时间的Daemon，因此您不必担心手动清理它们。")]),a._v(" "),r("ul",[r("li",[r("p",[r("strong",[a._v("idle")])]),a._v(" "),r("p",[a._v("空闲的Daemon是当前未执行构建或未执行其他有用工作的进程。")])]),a._v(" "),r("li",[r("p",[r("strong",[a._v("compatible")])]),a._v(" "),r("p",[a._v("兼容的Daemon是可以（或可以使其）满足所请求构建环境的要求的Daemon。用于执行构建的Java运行时是构建环境的一个示例方面。另一个示例是构建运行时所需的JVM系统属性集。")])])]),a._v(" "),r("p",[a._v("Daemon可能无法满足所请求的构建环境的某些方面。如果Daemon与Java 8运行时一起运行，但是请求的环境要求Java 10，则该Daemon不兼容，必须启动另一个Daemon。而且，一旦JVM启动，就无法更改Java运行时的某些属性。例如，无法更改正在运行的JVM的内存分配（例如"),r("code",[a._v("-Xmx1024m")]),a._v("），默认文本编码，默认语言环境等。")]),a._v(" "),r("p",[a._v("通常，“请求的构建环境”是从构建客户端（例如Gradle命令行客户端，IDE等）环境的各个方面隐式构建的，并且是通过命令行开关和设置显式构建的。有关如何指定和控制构建环境的详细信息，请参见"),r("a",{attrs:{href:"/contents/03-running-gradle-builds/01-customizing-execution/01-build-environment"}},[a._v("构建环境")]),a._v("。")]),a._v(" "),r("p",[a._v("以下JVM系统属性实际上是不可变的。如果请求的构建环境需要这些属性中的任何一个，且其值与Daemon的JVM具有的此属性不同，则该Daemon不兼容。")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("file.encoding")])]),a._v(" "),r("li",[r("p",[a._v("user.language")])]),a._v(" "),r("li",[r("p",[a._v("user.country")])]),a._v(" "),r("li",[r("p",[a._v("user.variant")])]),a._v(" "),r("li",[r("p",[a._v("java.io.tmpdir")])]),a._v(" "),r("li",[r("p",[a._v("javax.net.ssl.keyStore")])]),a._v(" "),r("li",[r("p",[a._v("javax.net.ssl.keyStorePassword")])]),a._v(" "),r("li",[r("p",[a._v("javax.net.ssl.keyStoreType")])]),a._v(" "),r("li",[r("p",[a._v("javax.net.ssl.trustStore")])]),a._v(" "),r("li",[r("p",[a._v("javax.net.ssl.trustStorePassword")])]),a._v(" "),r("li",[r("p",[a._v("javax.net.ssl.trustStoreType")])]),a._v(" "),r("li",[r("p",[a._v("com.sun.management.jmxremote")])])]),a._v(" "),r("p",[a._v("所需的Gradle版本是所请求的构建环境的另一方面。Daemon进程与特定的Gradle运行时耦合。在使用不同Gradle版本的会话中处理多个Gradle项目是导致多个Daemon进程运行的常见原因。")]),a._v(" "),r("h3",{attrs:{id:"daemon使用多少内存，可以分配更多空间吗？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#daemon使用多少内存，可以分配更多空间吗？","aria-hidden":"true"}},[a._v("#")]),a._v(" Daemon使用多少内存，可以分配更多空间吗？")]),a._v(" "),r("p",[a._v("如果请求的构建环境未指定最大堆大小，则Daemon将使用最多512MB的堆。它将使用JVM的默认最小堆大小。对于大多数构建来说，512MB绰绰有余。具有数百个子项目的较大内部版本，大量配置和源代码可能需要或具有更好的性能，并具有更多的内存。")]),a._v(" "),r("p",[a._v("要增加Daemon可以使用的内存量，请在请求的构建环境中指定适当的标志。有关详细信息，请参见"),r("a",{attrs:{href:"/contents/03-running-gradle-builds/01-customizing-execution/01-build-environment"}},[a._v("构建环境")]),a._v("。")]),a._v(" "),r("h3",{attrs:{id:"如何停止daemon？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何停止daemon？","aria-hidden":"true"}},[a._v("#")]),a._v(" 如何停止Daemon？")]),a._v(" "),r("p",[a._v("闲置3个小时或更短的时间后，Daemon进程将自动终止。如果您希望在此之前停止Daemon进程，则可以通过操作系统终止该进程或运行"),r("code",[a._v("gradle --stop")]),a._v("命令。"),r("code",[a._v("--stop")]),a._v("开关使Gradle请求 "),r("em",[a._v("所有正在运行")]),a._v(" 的，与用于运行命令的Gradle版本相同的Daemon进程自行终止。")]),a._v(" "),r("h3",{attrs:{id:"daemon会有什么问题？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#daemon会有什么问题？","aria-hidden":"true"}},[a._v("#")]),a._v(" Daemon会有什么问题？")]),a._v(" "),r("p",[a._v("在日常开发过程中，为了使守护进程健壮、透明和不引人注目，已经进行了大量的工程工作。然而，Daemon进程有时会被破坏或耗尽。Gradle构建从多个源执行任意代码。虽然Gradle本身是为Daemon进程设计的，并通过Daemon进程进行了大量测试，但是用户构建脚本和第三方插件可能会通过内存泄漏或全局状态损坏等缺陷破坏Daemon进程的稳定。")]),a._v(" "),r("p",[a._v("通过运行无法正确释放资源的构建，还可能破坏Daemon程序的稳定性（通常是构建环境）。当使用Microsoft Windows时，这是一个特别棘手的问题，因为它对读取或写入后无法关闭文件的程序的宽容度较小。")]),a._v(" "),r("p",[a._v("Gradle主动监视堆使用情况，并尝试检测何时泄漏开始耗尽守护程序中的可用堆空间。当检测到问题时，"),r("strong",[a._v("Gradle Daemon")]),a._v(" 将完成当前正在运行的构建，并在下一个构建中主动重新启动该Daemon。默认情况下启用此监视，但是可以通过将"),r("code",[a._v("org.gradle.daemon.performance.enable-monitoring")]),a._v("系统属性设置为"),r("code",[a._v("false")]),a._v("来禁用此监视。")]),a._v(" "),r("p",[a._v("如果怀疑Daemon进程变得不稳定，则可以将其杀死。回想一下，可以为构建指定"),r("code",[a._v("--no-daemon")]),a._v("开关，以防止使用Daemon。这对于诊断Daemon是否为问题的罪魁祸首非常有用。")]),a._v(" "),r("h2",{attrs:{id:"tools-ides"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tools-ides","aria-hidden":"true"}},[a._v("#")]),a._v(" Tools & IDEs")]),a._v(" "),r("p",[a._v("IDE和其他工具用于与Gradle集成的Gradle Tooling API始终使用 "),r("strong",[a._v("Gradle Daemon")]),a._v(" 来执行构建。如果要在IDE中执行Gradle构建，则使用的是 "),r("strong",[a._v("Gradle Daemon")]),a._v("，而无需为您的环境启用它。")]),a._v(" "),r("h2",{attrs:{id:"gradle-daemon如何使构建更快？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gradle-daemon如何使构建更快？","aria-hidden":"true"}},[a._v("#")]),a._v(" Gradle Daemon如何使构建更快？")]),a._v(" "),r("p",[r("strong",[a._v("Gradle Daemon")]),a._v(" 是一个 "),r("em",[a._v("长期存在的构建进程")]),a._v("。在两次构建之间，它空闲地等待下一次构建。这具有明显的好处，即对于多个构建只需要一次将Gradle加载到内存中，而不是对于每个构建加载一次。这本身就是一项重大的性能优化，但并非止于此。")]),a._v(" "),r("p",[a._v("现代JVM性能的一个重要方面是运行时代码优化。例如，HotSpot（Oracle提供的JVM实现，用作OpenJDK的基础）在运行时对代码进行优化。优化是渐进的，不是瞬时的。也就是说，在执行过程中对代码进行了逐步优化，这意味着纯粹由于此优化过程而使得后续构建可以更快。使用HotSpot进行的实验表明，需要5到10次构建才能稳定优化。守护程序的第一个构建和第10个构建之间的可感知构建时间差异可能非常明显。")]),a._v(" "),r("p",[a._v("Daemon还允许跨构建更有效地进行内存缓存。例如，构建所需的类（例如插件，构建脚本）可以保存在构建之间的内存中。同样，Gradle可以维护构建数据的内存缓存，例如用于增量构建的任务输入和输出的哈希值。")])])}),[],!1,null,null,null);e.default=s.exports}}]);